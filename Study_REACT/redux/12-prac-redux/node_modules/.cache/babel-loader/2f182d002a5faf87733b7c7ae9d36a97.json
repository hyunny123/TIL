{"ast":null,"code":"//import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\nimport counterSlice from \"./counterSlice\";\nimport auth from \"./auth\";\nconst store = configureStore({\n  //reducer: counterSlice.reducer,\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;\n\n// const initialCounterState = { counter: 0, showCounter: true };\n\n// //관련된 상태끼리 모아놓는 것이 좋다. counter 부분\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initialState: initialCounterState,\n//   reducers: {\n//     increment(state) {\n//       state.counter++;\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       //   state.counter = state.counter + action.amount;\n//       state.counter = state.counter + action.payload;\n//     },\n//     toggleCounter(state) {\n//       state.showCounter = !state.showCounter;\n//     },\n//   },\n// });\n\n// const initialAuthState = {\n//   isAuthenticated: false,\n// };\n\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   },\n// });\n\n//리덕스\n// export const INCREMENT = \"increment\";\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === INCREMENT) {\n//     // state.counter++;\n//     //return state;\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n//const store = createStore(counterReducer);\n\n//const store = createStore(counterSlice.reducer);","map":{"version":3,"names":["createSlice","configureStore","counterSlice","auth","store","reducer","counter","authSlice","counterActions","actions","authActions"],"sources":["/Users/hyunjung/Desktop/udemy/react/test/Ustudy/12-prac-redux/src/store/index.js"],"sourcesContent":["//import { createStore } from \"redux\";\nimport { createSlice, configureStore } from \"@reduxjs/toolkit\";\n\nimport counterSlice from \"./counterSlice\";\nimport auth from \"./auth\";\n\nconst store = configureStore({\n  //reducer: counterSlice.reducer,\n  reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;\n\n// const initialCounterState = { counter: 0, showCounter: true };\n\n// //관련된 상태끼리 모아놓는 것이 좋다. counter 부분\n// const counterSlice = createSlice({\n//   name: \"counter\",\n//   initialState: initialCounterState,\n//   reducers: {\n//     increment(state) {\n//       state.counter++;\n//     },\n//     decrement(state) {\n//       state.counter--;\n//     },\n//     increase(state, action) {\n//       //   state.counter = state.counter + action.amount;\n//       state.counter = state.counter + action.payload;\n//     },\n//     toggleCounter(state) {\n//       state.showCounter = !state.showCounter;\n//     },\n//   },\n// });\n\n// const initialAuthState = {\n//   isAuthenticated: false,\n// };\n\n// const authSlice = createSlice({\n//   name: \"auth\",\n//   initialState: initialAuthState,\n//   reducers: {\n//     login(state) {\n//       state.isAuthenticated = true;\n//     },\n//     logout(state) {\n//       state.isAuthenticated = false;\n//     },\n//   },\n// });\n\n//리덕스\n// export const INCREMENT = \"increment\";\n\n// const counterReducer = (state = initialState, action) => {\n//   if (action.type === INCREMENT) {\n//     // state.counter++;\n//     //return state;\n//     return {\n//       counter: state.counter + 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"increase\") {\n//     return {\n//       counter: state.counter + action.amount,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"decrement\") {\n//     return {\n//       counter: state.counter - 1,\n//       showCounter: state.showCounter,\n//     };\n//   }\n\n//   if (action.type === \"toggle\") {\n//     return {\n//       showCounter: !state.showCounter,\n//       counter: state.counter,\n//     };\n//   }\n\n//   return state;\n// };\n\n//const store = createStore(counterReducer);\n\n//const store = createStore(counterSlice.reducer);\n"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,cAAc,QAAQ,kBAAkB;AAE9D,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,IAAI,MAAM,QAAQ;AAEzB,MAAMC,KAAK,GAAGH,cAAc,CAAC;EAC3B;EACAI,OAAO,EAAE;IAAEC,OAAO,EAAEJ,YAAY,CAACG,OAAO;IAAEF,IAAI,EAAEI,SAAS,CAACF;EAAQ;AACpE,CAAC,CAAC;AACF,OAAO,MAAMG,cAAc,GAAGN,YAAY,CAACO,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACE,OAAO;AAE5C,eAAeL,KAAK;;AAEpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module"}